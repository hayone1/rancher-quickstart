version: '3'

env:
  ANSIBLE_INVENTORY: hosts.yml
    
  # TF_LOG: 1

vars:
  INIT_TAGS: prerequisite
  INSTALL_TAGS: install
  MAIN_PLAYBOOK: deploy-microcloud.yml
  FLAVORS: ./flavors

tasks:
  ############# Checks #############
  # Run the tasks in sequence
  check:
    cmds:
      - task: terraform_check
  # Define tasks
  terraform_check:
    desc: Check if Terraform is installed
    internal: true
    silent: true
    cmds:
      - |
        if command -v terraform &> /dev/null; then
          echo "✅️ Terraform is installed."
        else
          echo "❌ Terraform is not installed. See https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli"
          exit 10
        fi
  envvar_check:
    desc: Verify the required provider environment variables are set.
    internal: true
    silent: true
    vars:
      # get from parent
      FLAVOR: '{{default "undefined" .FLAVOR}}'
      PROVIDER: '{{default "undefined" .PROVIDER}}'
      REQUIRED_VARS:
        sh: |-
          if [ -f "./{{.FLAVORS}}/{{.FLAVOR}}/{{.PROVIDER}}/config.yml" ]; then
            yq '.required_env | join(" ")' "./{{.FLAVORS}}/{{.FLAVOR}}/{{.PROVIDER}}/config.yml"
          fi
    dotenv: ['./group_vars/{{.FLAVOR}}.env', './group_vars/.env', '.env']
    cmds:
      - for: { var: REQUIRED_VARS }
        cmd: |
          if [[ -v {{.ITEM}} ]]; then
              echo "✅️ Verify that env variable '{{.ITEM}}' is present for provider {{.PROVIDER}}."
          else
              echo "❌ Verify that env variable '{{.ITEM}}' is present for provider {{.PROVIDER}}."
              echo "Please export env variable {{.ITEM}} or set it in .env file at project root or in group_vars!"
              echo "You can also place env variables in a flavor specific env file within the group_vars eg. ./group_vars/{{.FLAVOR}}.env "
              exit 12
          fi
  ############# Check if packages are installed #############

  ############# Deploy Infra #############

  provision-*-*:
    desc: |-
      provisions the kubernetes flavor using the infrastructure desribed
      in the cloud provider. eg. task provision-rancher-azure, provision-microk8s-do, 
      provision-kubeadm-aws -- -auto-approve etc.
    # silent: true
    vars:
      FLAVOR: '{{index .MATCH 0}}'
      PROVIDER: '{{index .MATCH 1}}'
      REQUIRED_FOLDERS:
        sh: |-
          if [ -f "./{{.FLAVORS}}/{{.FLAVOR}}/{{.PROVIDER}}/config.yml" ]; then
            yq '.required_folders | join(" ")' "./{{.FLAVORS}}/{{.FLAVOR}}/{{.PROVIDER}}/config.yml"
          fi
    cmds:
      # has no effect if no env var is needed.
      - task: envvar_check
        vars:
          FLAVOR: '{{ .FLAVOR }}'
          PROVIDER: '{{ .PROVIDER }}'
        silent: true
      # create a folder for the flavor-cloud provider
      - for: { var: REQUIRED_FOLDERS }
        cmd: |-
            cp -r {{.FLAVORS}}/{{.FLAVOR}}/{{.PROVIDER}}/{{.ITEM}} ./{{.FLAVOR}}
      - cmd: |-
          mkdir -p ./{{.FLAVOR}}/{{.PROVIDER}}
          cp -r {{.FLAVORS}}/{{.FLAVOR}}/{{.PROVIDER}} ./{{.FLAVOR}}
      - cmd: |-
          current_utc_time=$(date -u)
          terraform -chdir=./{{.FLAVOR}}/{{.PROVIDER}}/ init
          # using utc time to cater for oracle_cloud's requirements
          faketime -f "$current_utc_time" terraform -chdir=./{{.FLAVOR}}/{{.PROVIDER}} apply {{.CLI_ARGS}}

  ############# Deploy Infra #############

  ############# Destroy Infra #############
  destroy-*-*:
    desc: |-
      Destroys the kubernetes resources created for a specific flavor and provider.
      eg. task destroy-kubenow-oci
    vars:
      FLAVOR: '{{index .MATCH 0}}'
      PROVIDER: '{{index .MATCH 1}}'
    dotenv: ['./group_vars/{{.FLAVOR}}.env', './group_vars/.env', '.env']
    cmds:
      # env variables also need to exist for destroy
      - task: envvar_check
        vars:
          FLAVOR: '{{ .FLAVOR }}'
          PROVIDER: '{{ .PROVIDER }}'
        silent: true
      - cmd: |-
          if [ -f ./{{.FLAVOR}}/{{.PROVIDER}}/terraform.tfstate ]; then
            terraform -chdir=./{{.FLAVOR}}/{{.PROVIDER}} destroy {{.CLI_ARGS}}
          fi
      - cmd: rm -rf ./{{.FLAVOR}}/{{.PROVIDER}}
      - cmd: |-
          if ! [ "$(ls -A ./{{.FLAVOR}})" ]; then
            rm -r ./{{.FLAVOR}}
          fi 
  ############# Destroy Infra #############